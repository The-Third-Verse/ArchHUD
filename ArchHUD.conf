name: ArchHud - Archaegeo v2.104 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
  screenHud:
    class: ScreenUnit
    select: manual
  transponder:
    class: TransponderUnit
    select: manual
handlers:
  unit:
    onStart:
      lua: |
        __wrap_lua__stopped=false
        __wrap_lua__stopOnError=false
        __wrap_lua__rethrowErrorAlways=false
        __wrap_lua__rethrowErrorIfStopped=true
        __wrap_lua__printError=true
        useTheseSettings = false --export:  Change this to true to override databank saved settings
        userControlScheme = "keyboard" --export: (Default: "keyboard") Set to "virtual joystick", "mouse", or "keyboard". This can be set by holding SHIFT and clicking the button in lower left of main Control buttons view.
        soundFolder = "archHUD" --export: (Default: "archHUD") Set to the name of the folder with sound files in it. Must be changed from archHUD to prevent other scripts making your PC play sounds.
        privateFile = "name" --export: (Default "name") Set to the name of the file for private locations to prevent others from getting your private locations. Filename should end in .lua
        customAtlas = "atlas" --export: (Default "atlas") Custom atlas file to override NQ atlas (file need to be located in autoconf/custom/)
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu. False is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze your character in place when using a remote controller.
        brightHud = false --export: (Default: false) Enable to prevent hud hiding when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down) Does not affect selecting buttons or camera.
        autoRollPreference = false --export: (Default: false) [Only in atmosphere] - When the pilot stops rolling, flight model will try to get back to horizontal (no roll)
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system. If on will prevent this HUD from doing anything with AGG.
        ShouldCheckDamage = false --export: (Default: true) Whether or not damage checks are performed. Disable for performance improvement on very large ships or if using external Damage Report and you do not want the built in info.
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit (Hud built in speed limiter)
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold (needed for ships that drift alignment in altitude hold mode due to poor inertial matrix)
        DisplayDeadZone = true --export: (Default: true) Virtual Joystick Mode: Set this to false to not display deadzone circle while in virtual joystick mode.
        showHud = true --export: (Default: true) False to hide the HUD screen and only use HUD Autopilot features (AP via ALT+# keys)
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the vanilla widgets via ALT+3. Note, hiding the HUD with Alt+3 gives a lot of FPS back in laggy areas, so leave true normally.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        SetWaypointOnExit = false --export: (Default: true) Set to false to not set a waypoint when you exit hud. True helps find your ship in crowded locations when you get out of seat.
        AlwaysVSpd = false --export: (Default: false) Set to true to make vertical speed meter stay on screen when you alt-3 widget mode.
        BarFuelDisplay = true --export: (Default: true) Set to false to use old non-bar fuel display
        voices = true --export: (Default: true) Set to false to disable voice sounds when using sound pack
        alerts = true --export: (Default: true) Set to false to disable alert sounds when using sound pack
        CollisionSystem = true --export: (Default: true) If True, system will provide collision alerts and abort vector to target if conditions met.
        AbandonedRadar = false --export: (Default: false) If true, and CollisionSystem is true, all radar contacts will be checked for abandoned status.
        AutoShieldToggle = true --export: (Default: true) If true, system will toggle Shield off in safe space and on in PvP space automagically.
        PreventPvP = true --export: (Default: true) If true, system will stop you before crossing from safe to pvp space while in autopilot.
        DisplayOdometer = true --export: (Default: true) If false the top odometer bar of information will be hidden.
        ECUHud = false --export: (Default: false) If set to true and HUD is installed on an Emergency Control Unit, when ECU activates due to leaving control unit, it will continue normal hud flight.
        MaintainOrbit = true --export: (Default: true) If true, ship will attempt to maintain orbit if it decays (when not autopiloting to a landing point) till fuel runs out.
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing, determine by experimentation. Higher allows faster AP Bank turns.
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching, determine by experimentation.
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing. 30 is safe for almost all ships.  
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold. You can set higher or lower depending on your ships capabilities.
        ReEntryPitch = -30 --export: (Default: -30) Maximum downward pitch allowed during freefall portion of re-entry.
        AutopilotSpaceDistance = 5000 --export: (Default: 5000) Target distance AP will try to stop from a custom waypoint in space.  Good ships can lower this value a lot.
        TargetOrbitRadius = 1.3 --export: (Default: 1.3) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  Value is multiple of Atmospheric Height
        LowOrbitHeight = 2000 --export: (Default: 2000) Height of Orbit above top of atmospehre when using Alt-4-4 same planet autopilot or alt-6-6 in space.
        AtmoSpeedLimit = 1175 --export: (Default: 1175) Speed limit in Atmosphere in km/h. AtmoSpeedAssist will cause ship to throttle back when this speed is reached.
        SpaceSpeedLimit = 66000 --export: (Default: 66000) Space speed limit in KM/H. If you hit this speed and are NOT in active autopilot, engines will turn off to prevent using all fuel (66000 means they wont turn off)
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground height AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height above ground when G used to lift off, 50 is above all max hover heights.
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL when on ground. Will help prevent ship landing on ground then bouncing back up to landing gear height. 
        ReEntryHeight = 100000 --export: (Default: 100000) Height above a planets maximum surface altitude used for re-entry, if height exceeds min space engine height, then 11% atmo is used instead. (100000 means 11% is used)
        MaxGameVelocity = -1.00 --export: (Default: -1.00) Max speed for your autopilot in m/s.  If -1 then when you sit down it will set to actualy max speed.
        AutopilotInterplanetaryThrottle = 1 --export: (Default: 1) How much throttle, 0.0 to 1, you want it to use when in autopilot to another planet while reaching MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your space engines to warmup. Basic Space Engines, from XS to XL: 0.25,1,4,16,32. Only affects turn and burn brake calculations.
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates on unslotted tanks, set this to the fuel tank handling level of the person who placed the tank. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates on unslotted tanks, set this to the fuel tank handling level of the person who placed the tank. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates on unslotted tanks, set this to the fuel tank handling level of the person who placed the tank. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates on unslotted tanks, set this to the Container Optimization level of the person who placed the tanks. Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate estimates on unslotted tanks, set this to the fuel tank optimization skill level of the person who placed the tank. Ignored for slotted tanks.
        AutoShieldPercent = 0 --export: (Default: 0) Automatically adjusts shield resists once per minute if shield percent is less than this value.
        EmergencyWarp = 0 --export: (Default: 0) If > 0 and a radar contact is detected in pvp space and the contact is closer than EmergencyWarp value, and all other warp conditions met, will initiate warp.
        DockingMode = 1 --export: (Default: 1) Docking mode of ship, default is 1 (Manual), options are Manual = 1, Automatic = 2, Semi-automatic = 3
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution. You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution. You can set 1080 on a 1440 to get larger resolution
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400. Looks different > 200. Set to 0 to remove.
        SafeR = 130 --export: (Default: 130) Primary HUD color
        SafeG = 224 --export: (Default: 224) Primary HUD color
        SafeB = 255 --export: (Default: 255) Primary HUD color
        PvPR = 255 --export: (Default: 255) PvP HUD color
        PvPG = 0 --export: (Default: 0) PvP HUD color
        PvPB = 0 --export: (Default: 0) PvP HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement.
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter. Default 1525
        vSpdMeterY = 325 --export: (Default: 325) Y postion of Vertical Speed Meter. Default 325
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter. Default 550
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter. Default 500
        fuelX = 30 --export: (Default: 30) X position of fuel tanks, set to 100 for non-bar style fuel display, set both fuelX and fuelY to 0 to hide fuel display
        fuelY = 700 --export: (Default: 700) Y position of fuel tanks, set to 300 for non-bar style fuel display, set both fuelX and fuelY to 0 to hide fuel display
        shieldX = 1750 --export: (Default: 1750) X position of shield indicator
        shieldY = 250 --export: (Default: 250) Y position of shield indicator
        radarX = 1750 --export: (Default 1750) X position of radar info
        radarY = 350 --export: (Default: 350) Y position of radar info
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 0 --export: (Default: 0) X postion of Orbit Display 
        OrbitMapY = 30 --export: (Default: 30) Y position of Orbit Display
        speedChangeLarge = 5.0 --export: (Default: 5) The speed change that occurs when you tap speed up/down or mousewheel, default is 5%
        speedChangeSmall = 1.0 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1%
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere] When autoRoll is engaged, this factor will increase to strength of the roll back to 0
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis (higher value may be unstable)
        autoRollRollThreshold = 180 --export: (Default: 180) The amount of roll below which autoRoll to 0 will occur (if autoRollPreference is true)
        minRollVelocity = 150 --export: (Default: 150) Min velocity, in m/s, over which autorolling can occur
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed (higher value may be unstable)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control, affects rate of pitch change
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control, affects rate of yaw change
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction> (higher value may be unstable)
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. 
        ExtraEscapeThrust = 1.0 --export: (Default: 1.0) Set this to 1 to use friction burn speed as your max speed when escaping atmosphere. Setting other than 1 will be a the value multiplied by your friction burn speed.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major" These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right" These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down" These will be added to the engines that are control by vertical.
        allowedHorizontalDrift = 0.05 --export: (Default: 0.05) Allowed horizontal drift rate, in m/s, during brakelanding with Alignment or Drift prevention active.
        FastOrbit = 0.0 --export: (Default: 0.0) If > 0, and MaintainOrbit is true, ship will add OrbitVelocity * FastOrbit to OrbitVelocity and use engines to maintain. USE AT OWN RISK.
        function __wrap_lua__error(a) if __wrap_lua__stopped then return end a=tostring(a):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"','chunk'):gsub("&","&amp;"):gsub("<","&lt;"):gsub(">","&gt;") local b=unit or self or {} if __wrap_lua__printError and system and system.print then system.print("Error: "..a:gsub("\n","<br>")) end if __wrap_lua__stopOnError then __wrap_lua__stopped=true end if __wrap_lua__stopped and b and b.exit then b.exit() end if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then error(a) end end __wrap_lua__traceback=traceback or (debug and debug.traceback) or function(a,b)return b or a end local a,b=xpcall(function() Nav=Navigator.new(system,core,unit)function p(a)system.print(system.getArkTime()..": "..a)end;RemoteHud=false;saveableVariablesBoolean={userControlScheme={set=function(b)userControlScheme=b end,get=function()return userControlScheme end},soundFolder={set=function(b)soundFolder=b end,get=function()return soundFolder end},privateFile={set=function(b)privateFile=b end,get=function()return privateFile end},freeLookToggle={set=function(b)freeLookToggle=b end,get=function()return freeLookToggle end},BrakeToggleDefault={set=function(b)BrakeToggleDefault=b end,get=function()return BrakeToggleDefault end},RemoteFreeze={set=function(b)RemoteFreeze=b end,get=function()return RemoteFreeze end},brightHud={set=function(b)brightHud=b end,get=function()return brightHud end},RemoteHud={set=function(b)RemoteHud=b end,get=function()return RemoteHud end},VanillaRockets={set=function(b)VanillaRockets=b end,get=function()return VanillaRockets end},InvertMouse={set=function(b)InvertMouse=b end,get=function()return InvertMouse end},autoRollPreference={set=function(b)autoRollPreference=b end,get=function()return autoRollPreference end},ExternalAGG={set=function(b)ExternalAGG=b end,get=function()return ExternalAGG end},ShouldCheckDamage={set=function(b)ShouldCheckDamage=b end,get=function()return ShouldCheckDamage end},AtmoSpeedAssist={set=function(b)AtmoSpeedAssist=b end,get=function()return AtmoSpeedAssist end},ForceAlignment={set=function(b)ForceAlignment=b end,get=function()return ForceAlignment end},DisplayDeadZone={set=function(b)DisplayDeadZone=b end,get=function()return DisplayDeadZone end},showHud={set=function(b)showHud=b end,get=function()return showHud end},hideHudOnToggleWidgets={set=function(b)hideHudOnToggleWidgets=b end,get=function()return hideHudOnToggleWidgets end},ShiftShowsRemoteButtons={set=function(b)ShiftShowsRemoteButtons=b end,get=function()return ShiftShowsRemoteButtons end},SetWaypointOnExit={set=function(b)SetWaypointOnExit=b end,get=function()return SetWaypointOnExit end},AlwaysVSpd={set=function(b)AlwaysVSpd=b end,get=function()return AlwaysVSpd end},BarFuelDisplay={set=function(b)BarFuelDisplay=b end,get=function()return BarFuelDisplay end},voices={set=function(b)voices=b end,get=function()return voices end},alerts={set=function(b)alerts=b end,get=function()return alerts end},CollisionSystem={set=function(b)CollisionSystem=b end,get=function()return CollisionSystem end},AbandonedRadar={set=function(b)AbandonedRadar=b end,get=function()return AbandonedRadar end},AutoShieldToggle={set=function(b)AutoShieldToggle=b end,get=function()return AutoShieldToggle end},PreventPvP={set=function(b)PreventPvP=b end,get=function()return PreventPvP end},DisplayOdometer={set=function(b)DisplayOdometer=b end,get=function()return DisplayOdometer end},ECUHud={set=function(b)ECUHud=b end,get=function()return ECUHud end},MaintainOrbit={set=function(b)MaintainOrbit=b end,get=function()return MaintainOrbit end}}savableVariablesHandling={YawStallAngle={set=function(b)YawStallAngle=b end,get=function()return YawStallAngle end},PitchStallAngle={set=function(b)PitchStallAngle=b end,get=function()return PitchStallAngle end},brakeLandingRate={set=function(b)brakeLandingRate=b end,get=function()return brakeLandingRate end},MaxPitch={set=function(b)MaxPitch=b end,get=function()return MaxPitch end},ReEntryPitch={set=function(b)ReEntryPitch=b end,get=function()return ReEntryPitch end},AutopilotSpaceDistance={set=function(b)AutopilotSpaceDistance=b end,get=function()return AutopilotSpaceDistance end},TargetOrbitRadius={set=function(b)TargetOrbitRadius=b end,get=function()return TargetOrbitRadius end},LowOrbitHeight={set=function(b)LowOrbitHeight=b end,get=function()return LowOrbitHeight end},AtmoSpeedLimit={set=function(b)AtmoSpeedLimit=b end,get=function()return AtmoSpeedLimit end},SpaceSpeedLimit={set=function(b)SpaceSpeedLimit=b end,get=function()return SpaceSpeedLimit end},AutoTakeoffAltitude={set=function(b)AutoTakeoffAltitude=b end,get=function()return AutoTakeoffAltitude end},TargetHoverHeight={set=function(b)TargetHoverHeight=b end,get=function()return TargetHoverHeight end},LandingGearGroundHeight={set=function(b)LandingGearGroundHeight=b end,get=function()return LandingGearGroundHeight end},ReEntryHeight={set=function(b)ReEntryHeight=b end,get=function()return ReEntryHeight end},MaxGameVelocity={set=function(b)MaxGameVelocity=b end,get=function()return MaxGameVelocity end},AutopilotInterplanetaryThrottle={set=function(b)AutopilotInterplanetaryThrottle=b end,get=function()return AutopilotInterplanetaryThrottle end},warmup={set=function(b)warmup=b end,get=function()return warmup end},fuelTankHandlingAtmo={set=function(b)fuelTankHandlingAtmo=b end,get=function()return fuelTankHandlingAtmo end},fuelTankHandlingSpace={set=function(b)fuelTankHandlingSpace=b end,get=function()return fuelTankHandlingSpace end},fuelTankHandlingRocket={set=function(b)fuelTankHandlingRocket=b end,get=function()return fuelTankHandlingRocket end},ContainerOptimization={set=function(b)ContainerOptimization=b end,get=function()return ContainerOptimization end},FuelTankOptimization={set=function(b)FuelTankOptimization=b end,get=function()return FuelTankOptimization end},AutoShieldPercent={set=function(b)AutoShieldPercent=b end,get=function()return AutoShieldPercent end},EmergencyWarp={set=function(b)EmergencyWarp=b end,get=function()return EmergencyWarp end},DockingMode={set=function(b)DockingMode=b end,get=function()return DockingMode end}}savableVariablesHud={ResolutionX={set=function(b)ResolutionX=b end,get=function()return ResolutionX end},ResolutionY={set=function(b)ResolutionY=b end,get=function()return ResolutionY end},circleRad={set=function(b)circleRad=b end,get=function()return circleRad end},SafeR={set=function(b)SafeR=b end,get=function()return SafeR end},SafeG={set=function(b)SafeG=b end,get=function()return SafeG end},SafeB={set=function(b)SafeB=b end,get=function()return SafeB end},PvPR={set=function(b)PvPR=b end,get=function()return PvPR end},PvPG={set=function(b)PvPG=b end,get=function()return PvPG end},PvPB={set=function(b)PvPB=b end,get=function()return PvPB end},centerX={set=function(b)centerX=b end,get=function()return centerX end},centerY={set=function(b)centerY=b end,get=function()return centerY end},throtPosX={set=function(b)throtPosX=b end,get=function()return throtPosX end},throtPosY={set=function(b)throtPosY=b end,get=function()return throtPosY end},vSpdMeterX={set=function(b)vSpdMeterX=b end,get=function()return vSpdMeterX end},vSpdMeterY={set=function(b)vSpdMeterY=b end,get=function()return vSpdMeterY end},altMeterX={set=function(b)altMeterX=b end,get=function()return altMeterX end},altMeterY={set=function(b)altMeterY=b end,get=function()return altMeterY end},fuelX={set=function(b)fuelX=b end,get=function()return fuelX end},fuelY={set=function(b)fuelY=b end,get=function()return fuelY end},shieldX={set=function(b)shieldX=b end,get=function()return shieldX end},shieldY={set=function(b)shieldY=b end,get=function()return shieldY end},radarX={set=function(b)radarX=b end,get=function()return radarX end},radarY={set=function(b)radarY=b end,get=function()return radarY end},DeadZone={set=function(b)DeadZone=b end,get=function()return DeadZone end},OrbitMapSize={set=function(b)OrbitMapSize=b end,get=function()return OrbitMapSize end},OrbitMapX={set=function(b)OrbitMapX=b end,get=function()return OrbitMapX end},OrbitMapY={set=function(b)OrbitMapY=b end,get=function()return OrbitMapY end}}savableVariablesPhysics={speedChangeLarge={set=function(b)speedChangeLarge=b end,get=function()return speedChangeLarge end},speedChangeSmall={set=function(b)speedChangeSmall=b end,get=function()return speedChangeSmall end},MouseXSensitivity={set=function(b)MouseXSensitivity=b end,get=function()return MouseXSensitivity end},MouseYSensitivity={set=function(b)MouseYSensitivity=b end,get=function()return MouseYSensitivity end},autoRollFactor={set=function(b)autoRollFactor=b end,get=function()return autoRollFactor end},rollSpeedFactor={set=function(b)rollSpeedFactor=b end,get=function()return rollSpeedFactor end},autoRollRollThreshold={set=function(b)autoRollRollThreshold=b end,get=function()return autoRollRollThreshold end},minRollVelocity={set=function(b)minRollVelocity=b end,get=function()return minRollVelocity end},TrajectoryAlignmentStrength={set=function(b)TrajectoryAlignmentStrength=b end,get=function()return TrajectoryAlignmentStrength end},torqueFactor={set=function(b)torqueFactor=b end,get=function()return torqueFactor end},pitchSpeedFactor={set=function(b)pitchSpeedFactor=b end,get=function()return pitchSpeedFactor end},yawSpeedFactor={set=function(b)yawSpeedFactor=b end,get=function()return yawSpeedFactor end},brakeSpeedFactor={set=function(b)brakeSpeedFactor=b end,get=function()return brakeSpeedFactor end},brakeFlatFactor={set=function(b)brakeFlatFactor=b end,get=function()return brakeFlatFactor end},DampingMultiplier={set=function(b)DampingMultiplier=b end,get=function()return DampingMultiplier end},hudTickRate={set=function(b)hudTickRate=b end,get=function()return hudTickRate end},ExtraEscapeThrust={set=function(b)ExtraEscapeThrust=b end,get=function()return ExtraEscapeThrust end},ExtraLongitudeTags={set=function(b)ExtraLongitudeTags=b end,get=function()return ExtraLongitudeTags end},ExtraLateralTags={set=function(b)ExtraLateralTags=b end,get=function()return ExtraLateralTags end},ExtraVerticalTags={set=function(b)ExtraVerticalTags=b end,get=function()return ExtraVerticalTags end},allowedHorizontalDrift={set=function(b)allowedHorizontalDrift=b end,get=function()return allowedHorizontalDrift end},FastOrbit={set=function(b)FastOrbit=b end,get=function()return FastOrbit end}}local c,d=pcall(require,"autoconf/custom/"..customAtlas)if not c then d=require("atlas")end;local e={"autoconf/custom/archhud/globals","autoconf/custom/archhud/hudclass","autoconf/custom/archhud/apclass","autoconf/custom/archhud/controlclass","autoconf/custom/archhud/atlasclass","autoconf/custom/archhud/baseclass","autoconf/custom/archhud/shieldclass","autoconf/custom/archhud/radarclass","autoconf/custom/archhud/axiscommandoverride","autoconf/custom/archhud/fueltankdefinitions","autoconf/custom/archhud/userclass"}for f,g in ipairs(e)do pcall(require,e[f])end;script={}VERSION_NUMBER=2.104;function script.onStart()PROGRAM.onStart()end;function script.onOnStop()PROGRAM.onStop()end;function script.onTick(h)PROGRAM.onTick(h)end;function script.onOnFlush()PROGRAM.onFlush()end;function script.onOnUpdate()PROGRAM.onUpdate()end;function script.onActionStart(i)PROGRAM.controlStart(i)end;function script.onActionStop(i)PROGRAM.controlStop(i)end;function script.onActionLoop(i)PROGRAM.controlLoop(i)end;function script.onInputText(j)PROGRAM.controlInput(j)end;function script.onEnter(k)PROGRAM.radarEnter(k)end;function script.onLeave(k)PROGRAM.radarLeave(k)end;globalDeclare(core,unit,system.getArkTime,math.floor,unit.getAtmosphereDensity)PROGRAM=programClass(Nav,core,unit,d,vBooster,hover,telemeter_1,antigrav,dbHud_1,dbHud_2,radar_1,radar_2,shield,gyro,warpdrive,weapon,screenHud_1,transponder_1)script.onStart()
        useTheseSettings = false --export:  Change this to true to override databank saved settings
        userControlScheme = "keyboard" --export: (Default: "keyboard") Set to "virtual joystick", "mouse", or "keyboard". This can be set by holding SHIFT and clicking the button in lower left of main Control buttons view.
        soundFolder = "archHUD" --export: (Default: "archHUD") Set to the name of the folder with sound files in it. Must be changed from archHUD to prevent other scripts making your PC play sounds.
        privateFile = "name" --export: (Default "name") Set to the name of the file for private locations to prevent others from getting your private locations. Filename should end in .lua
        customAtlas = "atlas" --export: (Default "atlas") Custom atlas file to override NQ atlas (file need to be located in autoconf/custom/)
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu. False is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze your character in place when using a remote controller.
        brightHud = false --export: (Default: false) Enable to prevent hud hiding when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down) Does not affect selecting buttons or camera.
        autoRollPreference = false --export: (Default: false) [Only in atmosphere] - When the pilot stops rolling, flight model will try to get back to horizontal (no roll)
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system. If on will prevent this HUD from doing anything with AGG.
        ShouldCheckDamage = false --export: (Default: true) Whether or not damage checks are performed. Disable for performance improvement on very large ships or if using external Damage Report and you do not want the built in info.
        AtmoSpeedAssist = true --export: (Default: true) Whether or not atmospheric speeds should be limited to a maximum of AtmoSpeedLimit (Hud built in speed limiter)
        ForceAlignment = false --export: (Default: false) Whether velocity vector alignment should be forced when in Altitude Hold (needed for ships that drift alignment in altitude hold mode due to poor inertial matrix)
        DisplayDeadZone = true --export: (Default: true) Virtual Joystick Mode: Set this to false to not display deadzone circle while in virtual joystick mode.
        showHud = true --export: (Default: true) False to hide the HUD screen and only use HUD Autopilot features (AP via ALT+# keys)
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the vanilla widgets via ALT+3. Note, hiding the HUD with Alt+3 gives a lot of FPS back in laggy areas, so leave true normally.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        SetWaypointOnExit = false --export: (Default: true) Set to false to not set a waypoint when you exit hud. True helps find your ship in crowded locations when you get out of seat.
        AlwaysVSpd = false --export: (Default: false) Set to true to make vertical speed meter stay on screen when you alt-3 widget mode.
        BarFuelDisplay = true --export: (Default: true) Set to false to use old non-bar fuel display
        voices = true --export: (Default: true) Set to false to disable voice sounds when using sound pack
        alerts = true --export: (Default: true) Set to false to disable alert sounds when using sound pack
        CollisionSystem = true --export: (Default: true) If True, system will provide collision alerts and abort vector to target if conditions met.
        AbandonedRadar = false --export: (Default: false) If true, and CollisionSystem is true, all radar contacts will be checked for abandoned status.
        AutoShieldToggle = true --export: (Default: true) If true, system will toggle Shield off in safe space and on in PvP space automagically.
        PreventPvP = true --export: (Default: true) If true, system will stop you before crossing from safe to pvp space while in autopilot.
        DisplayOdometer = true --export: (Default: true) If false the top odometer bar of information will be hidden.
        ECUHud = false --export: (Default: false) If set to true and HUD is installed on an Emergency Control Unit, when ECU activates due to leaving control unit, it will continue normal hud flight.
        MaintainOrbit = true --export: (Default: true) If true, ship will attempt to maintain orbit if it decays (when not autopiloting to a landing point) till fuel runs out.
        YawStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when yawing, determine by experimentation. Higher allows faster AP Bank turns.
        PitchStallAngle = 35 --export: (Default: 35) Angle at which the ship stalls when pitching, determine by experimentation.
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing. 30 is safe for almost all ships.  
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold. You can set higher or lower depending on your ships capabilities.
        ReEntryPitch = -30 --export: (Default: -30) Maximum downward pitch allowed during freefall portion of re-entry.
        AutopilotSpaceDistance = 5000 --export: (Default: 5000) Target distance AP will try to stop from a custom waypoint in space.  Good ships can lower this value a lot.
        TargetOrbitRadius = 1.3 --export: (Default: 1.3) How tight you want to orbit the planet at end of autopilot.  The smaller the value the tighter the orbit.  Value is multiple of Atmospheric Height
        LowOrbitHeight = 2000 --export: (Default: 2000) Height of Orbit above top of atmospehre when using Alt-4-4 same planet autopilot or alt-6-6 in space.
        AtmoSpeedLimit = 1175 --export: (Default: 1175) Speed limit in Atmosphere in km/h. AtmoSpeedAssist will cause ship to throttle back when this speed is reached.
        SpaceSpeedLimit = 66000 --export: (Default: 66000) Space speed limit in KM/H. If you hit this speed and are NOT in active autopilot, engines will turn off to prevent using all fuel (66000 means they wont turn off)
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground height AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height above ground when G used to lift off, 50 is above all max hover heights.
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL when on ground. Will help prevent ship landing on ground then bouncing back up to landing gear height. 
        ReEntryHeight = 100000 --export: (Default: 100000) Height above a planets maximum surface altitude used for re-entry, if height exceeds min space engine height, then 11% atmo is used instead. (100000 means 11% is used)
        MaxGameVelocity = -1.00 --export: (Default: -1.00) Max speed for your autopilot in m/s.  If -1 then when you sit down it will set to actualy max speed.
        AutopilotInterplanetaryThrottle = 1 --export: (Default: 1) How much throttle, 0.0 to 1, you want it to use when in autopilot to another planet while reaching MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your space engines to warmup. Basic Space Engines, from XS to XL: 0.25,1,4,16,32. Only affects turn and burn brake calculations.
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates on unslotted tanks, set this to the fuel tank handling level of the person who placed the tank. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates on unslotted tanks, set this to the fuel tank handling level of the person who placed the tank. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates on unslotted tanks, set this to the fuel tank handling level of the person who placed the tank. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates on unslotted tanks, set this to the Container Optimization level of the person who placed the tanks. Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate estimates on unslotted tanks, set this to the fuel tank optimization skill level of the person who placed the tank. Ignored for slotted tanks.
        AutoShieldPercent = 0 --export: (Default: 0) Automatically adjusts shield resists once per minute if shield percent is less than this value.
        EmergencyWarp = 0 --export: (Default: 0) If > 0 and a radar contact is detected in pvp space and the contact is closer than EmergencyWarp value, and all other warp conditions met, will initiate warp.
        DockingMode = 1 --export: (Default: 1) Docking mode of ship, default is 1 (Manual), options are Manual = 1, Automatic = 2, Semi-automatic = 3
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution. You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution. You can set 1080 on a 1440 to get larger resolution
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400. Looks different > 200. Set to 0 to remove.
        SafeR = 130 --export: (Default: 130) Primary HUD color
        SafeG = 224 --export: (Default: 224) Primary HUD color
        SafeB = 255 --export: (Default: 255) Primary HUD color
        PvPR = 255 --export: (Default: 255) PvP HUD color
        PvPG = 0 --export: (Default: 0) PvP HUD color
        PvPB = 0 --export: (Default: 0) PvP HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement.
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter. Default 1525
        vSpdMeterY = 325 --export: (Default: 325) Y postion of Vertical Speed Meter. Default 325
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter. Default 550
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter. Default 500
        fuelX = 30 --export: (Default: 30) X position of fuel tanks, set to 100 for non-bar style fuel display, set both fuelX and fuelY to 0 to hide fuel display
        fuelY = 700 --export: (Default: 700) Y position of fuel tanks, set to 300 for non-bar style fuel display, set both fuelX and fuelY to 0 to hide fuel display
        shieldX = 1750 --export: (Default: 1750) X position of shield indicator
        shieldY = 250 --export: (Default: 250) Y position of shield indicator
        radarX = 1750 --export: (Default 1750) X position of radar info
        radarY = 350 --export: (Default: 350) Y position of radar info
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 0 --export: (Default: 0) X postion of Orbit Display 
        OrbitMapY = 30 --export: (Default: 30) Y position of Orbit Display
        speedChangeLarge = 5.0 --export: (Default: 5) The speed change that occurs when you tap speed up/down or mousewheel, default is 5%
        speedChangeSmall = 1.0 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1%
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere] When autoRoll is engaged, this factor will increase to strength of the roll back to 0
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis (higher value may be unstable)
        autoRollRollThreshold = 180 --export: (Default: 180) The amount of roll below which autoRoll to 0 will occur (if autoRollPreference is true)
        minRollVelocity = 150 --export: (Default: 150) Min velocity, in m/s, over which autorolling can occur
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed (higher value may be unstable)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control, affects rate of pitch change
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control, affects rate of yaw change
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction> (higher value may be unstable)
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. 
        ExtraEscapeThrust = 1.0 --export: (Default: 1.0) Set this to 1 to use friction burn speed as your max speed when escaping atmosphere. Setting other than 1 will be a the value multiplied by your friction burn speed.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major" These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right" These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down" These will be added to the engines that are control by vertical.
        allowedHorizontalDrift = 0.05 --export: (Default: 0.05) Allowed horizontal drift rate, in m/s, during brakelanding with Alignment or Drift prevention active.
        FastOrbit = 0.0 --export: (Default: 0.0) If > 0, and MaintainOrbit is true, ship will add OrbitVelocity * FastOrbit to OrbitVelocity and use engines to maintain. USE AT OWN RISK.
         end,__wrap_lua__traceback) if not a then __wrap_lua__error(b) if not script then script={} end end 
    onStop:
      lua:       if not __wrap_lua__stopped and script.onOnStop then local a,b=xpcall(script.onOnStop,__wrap_lua__traceback,unit) if not a then __wrap_lua__error(b) end end
    tick(timerId):
      lua:       if not __wrap_lua__stopped and script.onTick then local a,b=xpcall(script.onTick,__wrap_lua__traceback,timerId,unit) if not a then __wrap_lua__error(b) end end
  system:
    actionStart(action):
      lua:       if not __wrap_lua__stopped and script.onActionStart then local a,b=xpcall(script.onActionStart,__wrap_lua__traceback,action,system) if not a then __wrap_lua__error(b) end end
    actionStop(action):
      lua:       if not __wrap_lua__stopped and script.onActionStop then local a,b=xpcall(script.onActionStop,__wrap_lua__traceback,action,system) if not a then __wrap_lua__error(b) end end
    actionLoop(action):
      lua:       if not __wrap_lua__stopped and script.onActionLoop then local a,b=xpcall(script.onActionLoop,__wrap_lua__traceback,action,system) if not a then __wrap_lua__error(b) end end
    onUpdate:
      lua:       if not __wrap_lua__stopped and script.onOnUpdate then local a,b=xpcall(script.onOnUpdate,__wrap_lua__traceback,system) if not a then __wrap_lua__error(b) end end
    onFlush:
      lua:       if not __wrap_lua__stopped and script.onOnFlush then local a,b=xpcall(script.onOnFlush,__wrap_lua__traceback,system) if not a then __wrap_lua__error(b) end end
    inputText(text):
      lua:       if not __wrap_lua__stopped and script.onInputText then local a,b=xpcall(script.onInputText,__wrap_lua__traceback,text,system) if not a then __wrap_lua__error(b) end end
  radar_1:
    enter(id):
      lua: |
        local radar = radar_1
              if not __wrap_lua__stopped and script.onEnter then local a,b=xpcall(script.onEnter,__wrap_lua__traceback,id,radar) if not a then __wrap_lua__error(b) end end
    leave(id):
      lua: |
        local radar = radar_1
              if not __wrap_lua__stopped and script.onLeave then local a,b=xpcall(script.onLeave,__wrap_lua__traceback,id,radar) if not a then __wrap_lua__error(b) end end
  radar_2:
    enter(id):
      lua: |
        local radar = radar_2
              if not __wrap_lua__stopped and script.onEnter then local a,b=xpcall(script.onEnter,__wrap_lua__traceback,id,radar) if not a then __wrap_lua__error(b) end end
    leave(id):
      lua: |
        local radar = radar_2
              if not __wrap_lua__stopped and script.onLeave then local a,b=xpcall(script.onLeave,__wrap_lua__traceback,id,radar) if not a then __wrap_lua__error(b) end end
